
< ToDoアプリをExpressで作成しよう >


todo_app内にusersテーブルとusersテーブルがもつカラムを作成します。
テーブルを作成するSQLはこちらです。
create table [作成したいテーブルが属するデータベース名].[作成したいテーブル名] (カラムの設定);

完成形のSQLはこちらです。
create table todo_app.users (id int unsigned auto_increment not null, name varchar(255) unique, password varchar(255), PRIMARY KEY (id));

カラムの設定について左から順に分解して説明します。

1.idカラムの設定
id
これはカラム名を指定しています。
まずはidカラムから設定するため、idを指定します。

int
このカラムに入るデータの型 (種類) を設定します。
idカラムには1から順番に数値が入るようにしたいため、数値を表すデータ型であるintを指定します。

unsigned
unsignedは0と正の整数を表すデータ型です。idはマイナスになることはないのでunsignedを指定します。

auto_increment
auto_incrementは1から順に自動的に採番してくれる属性です。idはレコードが登録された順に採番したいため、auto_incrementを設定します。

not null
nullとは何もデータが入っていない状態のことを指し、not nullを設定することで何かしらデータが入らなければならないという制約をつけることができます。

2.nameカラムの設定

name
カラム名を指定しています

varchar(255)
名前は文字列で入力されるため、文字列を表すデータ型であるvarcharを設定します。
また、()で文字数の上限を設定でき、今回は(255)とし上限を255文字に設定しています。

unique
uniqueは一意の制約を与える属性です。これを設定することで、nameカラムに入る値は一意でなければならず、登録しようとしたデータと同じデータが既に登録されていた場合、エラーになります。
つまり、今回の場合、ユーザ名を管理するnameカラムにunique属性を設定することで、既に存在しているユーザ名でユーザ登録をすることはできなくなります。

3.passwordカラムの設定

password
カラム名を指定しています

varchar(255)
先述のとおりです。

4.PRIMARY KEY (id)

PRIMARY KEYとは主キーというテーブル内のレコードを識別するための元となるカラムを設定するためのものです。
今回はidカラムのデータがレコードごとに一意になるように設定しているため、これを主キーとするため、PRIMARY KEY (id)としています。


次に、todo_app内にtasksテーブルとtaskテーブルがもつカラムを作成します。
完成形のSQLはこちらです。

create table todo_app.tasks (id int unsigned auto_increment not null, user_id int not null, content varchar(255) not null, PRIMARY KEY (id));



< データベースに保存 >

データベースに保存できているかを確認してみましょう。

mysql -u root -p でデータベースにログインしてください。

use todo_app;で使用するデータベース (todo_app) を選択します。

select * from tasks;でtaskテーブルの中身を確認してみましょう。

0.「ToDoアプリをExpressで作成しよう」=> https://zenn.dev/wkb/books/node-tutorial/viewer/todo_03

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< クエリビルダー >


前章ではmysqlモジュールを利用してデータベースを操作しました。
本章では、knex.jsというクエリビルダを導入し、データベースの操作部分を変更します。
クエリビルダとは、SQLを簡単に組むことはできる機能のことです。
mysqlモジュールを使ったデータベース操作では、SQLを丸々書く必要がありましたが、複雑な操作を行う場合はSQLも複雑になるため、手間がかかり、ミスも増えます。
クエリビルダは丸々SQLを書くよりも分かりやすく、簡単な記述でSQLを発行できるため、次章からデータベース操作が増える前にknex.jsに切り替えます。

knex.jsの環境構築をしよう
knex.jsは外部モジュールのため、mysqlモジュールと同様にnpmでインストールする必要があります。
コンソールでnode_studyフォルダ内にあるtodoappフォルダに移動してください。

以下コマンドでknex.jsモジュールをインストールしましょう。

npm install knex
次に、以下コマンドでknex.jsの接続設定ファイルを作成しましょう。

npx knex init

[事前準備で設定したrootユーザのパスワード]の部分をご自身のものに置き換えてください。
事前準備で設定したrootユーザのパスワードがhogeの場合は、password: "hoge",となります。

設定はオブジェクトで定義します。

同じ設定がdevelopment、staging、productionの3つ分ありますが、これは環境ごとに設定を用意しているためです。
アプリケーションは一般的に、開発環境で開発し、良きタイミングで開発内容をステージング環境に適用して動作確認を行い、問題があれば再度開発環境で修正、なければ本番環境に適用してリリースという流れで更新されていきます。
development、staging、productionはこの開発環境、ステージング環境、本番環境を表しています。

それでは各設定項目について説明します。

client
使用するデータベース用のモジュールを指定します。
今回はmysqlモジュールを使用するため、mysqlとなります。

connection
接続情報を設定します。

database
使用するデータベース名を指定します。
今回はtodo_appとなります。

user
接続に使用するユーザを指定します。
今回はrootとなります。

password
接続に使用するユーザのパスワードを指定します。
今回はrootユーザを使用するため、rootユーザのパスワードとなります。

pool
コネクションプールを設定します。
コネクションプールとは、データベースへの接続を保持して再利用する機能のことをいいます。

min
保持する接続数の最大限度を指定します。
max
保持する接続数の最小限度を指定します。
それでは、knexモジュールと設定を読み込むためのコードを記述し、これをknexを利用したいファイルから読み込めるようにします。

todoappフォルダ内にdbフォルダを作成してください。

次に、Visual Studio Codeを開き、新規ファイルを作成し、knex.jsというファイル名でdbフォルダに保存しましょう。





0.「ToDoアプリをExpressで作成しよう」=> https://zenn.dev/wkb/books/node-tutorial/viewer/todo_03
1. knexリファレンス => https://knexjs.org/
