
「ブラウザ環境」=> ECMAscript + WebAPIs

「サーバー環境 (Node.js)」=> ECMAscript + CommonJS




Node.js徹底攻略 ─ ヤフーのノウハウに学ぶ、パフォーマンス劣化やコールバック地獄との戦い方
https://eh-career.com/engineerhub/entry/2019/08/08/103000



< Nodeアプリの実行コマンド >
・node 実行するファイル名 => 設定したポート番号でサーバーが立つ！

npm install ejs



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
< Node.jsとExpressの技術発表 >

『Node.jsなら、サーバー側でもJavaScriptは戦える！！』

< Node.jsとは？？ >
「Node.js」を使うと、JavaScriptでサーバー処理の制御をすべてプログラミングすることができます。

つまり、普段慣れ親しんだJavaScriptだけでサーバー環境を構築したり大量のデータを捌いたりすることが出来るわけです。
また、現在では多数のNode.js向けライブラリが提供されており、IoT開発やスマホアプリ開発にも利用されるようになってきました！

このように、JavaScriptだけで実現できることが近年は特に増えています！

< Node.jsの特徴 >
1.非同期処理による高速な動作
プログラムには「同期処理」と「非同期処理」の2種類があります。一般的なプログラムは同期処理で動いており、上から下へ1行ずつ順番に実行されていくのが普通です。

例えば、サーバーにあるデータベースから「値」を取得するプログラムを想定してみましょう。


2.シングルスレッドによるメモリ消費の効率化
もう1つ、Node.jsの重要な概念として「シングルスレッド」「マルチスレッド」というのがあります。

一般的なサーバーは「マルチスレッド」に対応しており、複数のアクセスが来た際にはそれぞれメモリを割り当てて処理を行います。
しかし、この方法は「C10K問題」とよく言われるように、1万人規模の大量アクセスが来た場合にメモリがパンクして効率が悪くなります。
逆に「シングルスレッド」の場合は、1つのメモリでアクセスを1つずつ処理するのでメモリ効率はとても良いです。

ただし、この方法だと1つずつしか処理できないので大量のアクセスを制御しにくいのですが、Node.jsは非同期処理ができますよね？
そのため、シングルスレッドによる少ないメモリ消費で大量のアクセスを高速に処理できるというわけです！

3.「V8」エンジンによる高速な実行環境
Node.jsはJavaScriptを高速に実行させるため、Googleが開発した実行エンジン「V8」を利用しています。
「V8」はChromeブラウザに搭載されているのですが、これをサーバーサイドのNode.jsでも使えるようにしているわけです。

従来の実行エンジンと違い、JavaScriptを即座にコンピュータが理解できる機械語に変換して処理を行うため非常に高速です。
また、オープンソースとして開発されているので、「V8」のソースコードが無償で公開されているのも特徴の1つでしょう。

このような実行エンジンを利用することで、もともと高速な処理ができるNode.jsをさらに強固なものにしているわけです。


< Node.jsのメリット/デメリット >

Node.jsにはC10K問題を解決できるメリットがあります

C10K問題とはサーバーへの接続台数が1万台以上になると速度が遅くなるという問題です。
この問題はNode.jsを使うだけで解決可能であり、技術的なことに時間やコストを割く必要がありません。C10K問題を解決するカギとなるのは、すでに述べたノンブロッキングI/Oによる非同期処理です。

一方で、Node.jsにはデメリットもあります。Node.jsとフロントエンドのJavaScriptには、同じJavaScriptでも処理上の互換性がありません。
ただし、JavaScript同士なので、プログラミング言語自体の基礎的な書き方の知識などは活かすことができます。


< 公式リファレンスから引用 >
「Node.js®」とは
Node.js はスケーラブルなネットワークアプリケーションを構築するために設計された非同期型のイベント駆動の JavaScript 環境です。 
下の「Hello World」の例では、たくさんの接続を同時に処理することができます。 各接続ごとにコールバックは発火され、何もすることがない場合、Node.js はスリープします。

< 前提知識 >

基礎：JavaScriptの特徴
まずはJavaScriptと他のプログラミング言語の違いを知っておく必要があるので解説します。

0.JavaScriptはChromeやFirefoxといった「ブラウザ上」で動作するプログラミング言語です。
1.対してPythonやRubyのような一般的なプログラミング言語は通常「パソコン」(OS)上で動作します。
=> 

サーバーソフトウェアをインストールすれば、サーバーになる！

「クライアント(ブラウザ)/サーバー」の関係性 => 「リクエスト/レスポンス」の関係性

JavaScriptはブラウザ上で動くために開発されたプログラミング言語だ。ブラウザ上で、ページに動きを追加するのがメインのお仕事である。

このことが生み出す違いは、OSの機能にアクセスできるかどうかです。
「OSの機能」とは例えばファイルの読み書きや、ネットワーク通信などの機能のことです。
パソコン上で動作するアプリケーション（PythonやRubyなどを含む）ではこれらの機能を扱うことができます。


「Node.js」とはUnix系プラットフォーム上のサーバーサイド・スクリプト（JavaScript）環境のことで、「Google Chrome」のために開発されました。
PHPやRubyやPythonやJavaなどのプログラミング言語と同じく、サーバーの方で動作を行うため、「サーバーサイドJavaScript」と呼ばれることもあります。

Node.jsはサーバサイドでJavaScriptを実行できるようにしてくれるもの

Node.jsはサーバも構築できるし、アプリケーションプログラムも動かせる。



2009年に作成されたプラットフォームであり、多くの人から「軽量」「効率よく作業できる」と評判です。
その理由として、「ノンブロッキングI/O」と「イベントループ」の二つのモデルを使っていることが挙げられます。

Node.jsの特徴にシングルスレッドで動作することがありますが、これだと複数の処理を同時に行うことができません。
したがって、入出力の処理を同期させずに行うノンブロッキングI/Oを利用することで動作を速くしています。

また、リクエストなどをイベントして一つずつ処理をしていき、一つのイベントが終わったら次のイベントを処理するイベントループもNode.jsの効率を上げている理由に挙げられます。


Node.jsが使える場所：リアルタイムWeb
例えばリアルタイムWebなどの分野はNode.jsがとても強い。

リアルタイムWebとは、リアルタイムな反応が必要なWebの分野のことだ。
FacebookのメッセージやGoogleスプレッドシートなどがわかりやすい。LINE、Twitter、instagram、snapchat、Paypalなどもリアルタイム性が高い例だ。各種チャットツールもいい例だろう。

しかし、例えばLAMP開発環境でチャットアプリケーション開発することは、簡単ではない。

webブラウザとWebサーバ側が常時接続すること
データを保存し続け、Webブラウザ側に表示し続ける必要があること
これらの問題の為に、ユーザーがチャット画面を見るまでに必要以上の時間がかかってしまっていた。

Node.jsでは「新しい情報が来た！」と知らせてくれる機能を割と簡単に実装できる。お知らせが来たら、それを反映すればいい。チャットサービスなどがすんなりと作れる





表側と裏側、表側の処理はJavaScript一強！！
サーバーサイドでJavaScriptを動かしたい！！

< モジュール >
フロントエンド開発において特に重要な「モジュールAPI」

モジュールとは？
・モジュールはただのファイル
・1つのスクリプトは、1つのモジュール
・モジュールは相互に読み込んだり、exportとimportを使用して機能をやり取りしたり、あるモジュールの関数を別のモジュールから呼び出したりすることができます。

モジュール化することで、、、使い回しや保守性がアップする！

< JavaScriptの問題 >
・Javascriptは名前空間が1つしかない！ => 命名が被るとバグる！！ => 名前空間(スコープ)の問題
・読み込み順によるバグ：読み込みの順番(順序)をミスるとバグる！！ => 依存関係の問題 => 依存関係が複雑化すればするほど、
・人間には管理しきれない容量になる！！

1.名前空間(スコープ)の問題 => モジュールが解決！
2.依存関係の問題 => パッケージ管理(npm)で解決！

モジュール化されていると、そのファイル内で完結している。

モジュールには、スコープの概念があります。
JavaScriptのモジュールは、1ファイル単位で、ファイル内の変数や関数は外部に影響を及ぼしません。 

モジュール化によって、名前空間の問題(命名被る問題)は解決
=> ブラウザ側でもモジュールを使用したい！！


モジュールとは、建築用語としては設計上の基準となる基本寸法のことである。英語の module に由来する言葉であり、規格化された構成単位、それ自体独立した機能を持つもの、といった意味を持つ。
IT用語としては、ひとまとまりの機能のことを指し示し、独立性の高い交換可能なものといった意味合いを含む。ソフトウェア、ハードウェア両面で用いられる概念である。


ソフトウェア開発時のプログラムへの影響範囲を測る指標として、モジュール強度とモジュール結合度が用いられる。
いずれもプログラム部品の性質を示す言葉であり、モジュールが一つの機能のみ提供することをモジュール強度が強いという。
一方、各モジュール間で与える影響が小さいことをモジュール結合が弱いという。一般に、プログラムへの影響範囲を特定できることから、モジュール強度が高くモジュール結合が弱い設計が好まれる。


< Node.jsの誕生 >

Node.jsは2009年にRyan Dahlさんによって作られる。
モジュールという仕組みを使用することができる。

JavaScriptには、モジュールの仕様が複数存在している。
=> CommonJS

ブラウザでモジュールを使うために模索した結果、
コードを事前に変換することが主流となった。

コードを事前に変換すると、モジュールを使える以外にもいろいろな恩恵がある。

ブラウザとモジュール


サーバーサイドでモジュールが使われるようになると、
モジュールの次は、パッケージ管理システムが求められる。



モジュールによって、名前空間の機能の細分化がされる。 => 機能の組み合わせで色々なものが作れるようになった。

共有の需要 => 共通する機能は、使い回し。

< どうやって共有するの？ >
Node.jsでいろいろなパッケージが開発されるようになると、そのパッケージのバージョンを管理したり、共有するためのシステムの必要性が生まれる。
=> そこで、パッケージ管理システム

< パッケージ管理システム >
1.リポジトリの購読 => ローカル環境にインストールしたパッケージを更新できる。またパッケージを検索できる。
2.パッケージのインストール・削除 => パッケージを指定してローカルにインストールできる。
3.依存関係の解決 => パッケージに必要な別のパッケージを自動的にインストールや更新することができる。
4.設定管理 => 設定を書くことで、1・2・3を自動で行える。 => 毎回、手動でパッケージを入れる必要がなくなる。

パッケージインストールを手動で行うのは、非効率！
パッケージを自動で簡単にインストールしたり、管理できるのがパッケージ管理システム
2010年には、「npm」(Node package manager)が誕生！


パッケージとは、package.jsonで記述されたファイルやディレクトリのことです。
=> 共有したい機能の単位がパッケージ化されている。
=> 1ファイルの場合もあれば、1ディレクトリの場合もある。

・package-lock.json => 依存関係を知ることができる。
・node_modules => 依存関係のモジュールたち(パッケージ)が入っている。

< Expressをローカルにインストール >

npm install express

< サーバーサイドJSの準備が整ってきている >
1.名前空間の問題は、モジュール化で解決
2.依存関係の問題は、npmで解決
Node.js製のツールがどんどん開発 

< Node.jsが普及する >
・Yahoo => 2010年頃から
・paypal
・UberやNetflixも使用しており、有名

合同会社DMM.com
株式会社ディー・エヌ・エー
株式会社サイバーエージェント
株式会社AbemaTV
株式会社Cygames



< Node.jsとは何者なのか？？ > What?
Node.jsとは、JavaScript言語の「ランタイム環境」(プログラムを実行するための環境)です。
=> JavaScriptをサーバーサイドで動かすためのプラットフォーム！！

Node.jsとは？
実は、JavaScriptはブラウザ上だけではなく、サーバサイドでも動く。PHPやJavaなどと同じような使い方ができるということだ。

サーバサイドJavaScriptと呼ばれるが、その中でも代表的なのが「Node.js」だ。
「Node.js = サーバサイドJavaScript」


MicrosoftやYahoo!などITの大手企業がNode.jsを推薦している。


ブラウザでモジュールを使うためにコードを事前に変換する => バンドル・コンパイル




< なぜサーバサイドでJavaScript？ > Why?

これほど注目を浴びている理由を端的にお伝えしよう。
「クライアントもサーバサイドも同じ言語で書けたら楽じゃない？」これが最大の理由だ。

近年、JavaScriptがWebの表舞台のど真ん中に立つようになった。Flashが姿を消し、パソコンの性能が年々上昇しているのがその理由だ。リッチなサイトやWebサービスがどんどん登場している。

サーバサイドがよくわからないWebデザイナーの人たちも、JavaScriptは触らざるを得なくなっており、「JavaScriptならやったことある！」という状態になっている。

だからこそ、サーバサイドプログラムもJavaScriptで書けると言われると、「なにそれ魅力的ですね」となり脚光を浴びているわけだ。

JavaScriptでサーバサイドもクライアントサイドも書けたら効率的だ。JavaScriptを書けるエンジニアだけを集めたらいい。

他にも色々と理由はあるが、注目を浴びているメインの理由はここにあるだろう。Yahoo!のNode.jsに対する推薦コメントを見てみると、それがうかがえる。

Node.jsは Manhattan (Yahoo!のPaaS) の中核です。一つの言語を使って一つのコードベースを構築することを可能にします - それは開発者にとってのパラダイスです。

Renaud Waldura



< Node.jsでできること > How?

Node.jsはサーバも構築できるし、アプリケーションプログラムも動かせる。

Node.jsが使える場所：リアルタイムWeb
例えばリアルタイムWebなどの分野はNode.jsがとても強い。

リアルタイムWebとは、リアルタイムな反応が必要なWebの分野のことだ。FacebookのメッセージやGoogleスプレッドシートなどがわかりやすい。
LINE、Twitter、instagram、snapchat、Paypalなどもリアルタイム性が高い例だ。各種チャットツールもいい例だろう。

しかし、例えばLAMP開発環境でチャットアプリケーション開発することは、簡単ではない。

webブラウザとWebサーバ側が常時接続すること
データを保存し続け、Webブラウザ側に表示し続ける必要があること
これらの問題の為に、ユーザーがチャット画面を見るまでに必要以上の時間がかかってしまっていた。

Node.jsでは「新しい情報が来た！」と知らせてくれる機能を割と簡単に実装できる。お知らせが来たら、それを反映すればいい。チャットサービスなどがすんなりと作れる。

Node.jsが使える場所：多数のアクセスがある場所

Node.jsの第一目標は次のようになっている。

スケーラブルなネットワーク・プログラムを作成するための簡単な方法を提供すること

スケーラブルというのは拡張可能という意味だ。

JavaやPHPのようなプログラムでは、接続ごとに新しいスレッドが作られる。8GBのRAMで計算すると、最大ユーザー数は5000名以下しかアクセスができなくなる。これを増やそうと思ったら、コンピュータを増やすしかない。

Node.jsはこの問題を解決する数少ないプログラミング言語だ。シングルスレッドで非同期処理を行い、この問題に対応できる。（意味がわからなくても構わない。雰囲気だけ掴もう）

ただし、単純な処理以外にはそこまで強いイメージもない。一概に速度が速いとは言えないところがまた難しい。

Node.jsを使うときの注意点
色々とお伝えしてきたが、Node.jsは小規模で機動性の高いWebアプリケーションを使うのが無難だろう。特に、リアルタイム性が必要なアプリには最適だ。

アクセス多数問題は実際には、データベース側での対応でどうにか出来る側面も強い。大手企業での導入事例も多数あるが、まずは小規模アプリケーションで試すことをオススメする。

まとめ
Node.jsとは、について簡単にまとめてきたがいかがだっただろうか？

Node.jsはただサーバサイドでJavaScriptが動くというだけではなく、これまでのプログラミング言語とは違った特徴を持っている興味深い言語だ。

興味が出たら、ぜひインストールし、利用してみてほしい。



1.JavaScriptのプログラムがそのまま動く！
2.Webサーバーも自分で作る！


< Expressとは？ >
Node.jsは言わずとしれたサーバーサイドJavascriptの実行環境。
ExpressはそのNode.jsでの王道的な開発をスピードアップするためのフレームワークです。

Expressを使った開発効率向上の具体例としてREST APIの開発があります。REST APIを提供するWebサービスを開発する場合、URIやBodyを解析してリクエストの内容とデータを識別する必要があります。

例えば写真共有サービスを開発していて、とある写真を返すREST APIを提供する必要があるとします。このAPIが下記のようなフォーマットになるとします。

< Express.jsのメリット >
最小構成のインターフェースの提供なので、軽量であり、カスタマイズしやすい
コアがNode.jsなので利用可能なnpmモジュールが豊富
Node.jsのクライアントAPIであるMongooseでデータベースのアクセスが容易
日本語ドキュメントが豊富なので、初心者も学習しやすい
pugを使うことで、フロントエンドの開発も行うことでができます。開発者はバックエンドとフロントエンドの開発をJavaScriptだけで行うことができます。


< 参照 >
0. 「Node.js公式リファレンス」 => https://nodejs.org/ja/about/
1. 「初心者向け！3分で理解するNode.jsとは何か?」 => https://eng-entrance.com/what-is-nodejs 
2. 「Node.jsとはなにか？なぜみんな使っているのか？」 => https://qiita.com/non_cal/items/a8fee0b7ad96e67713eb
3. 「ゼロからはじめるExpress + Node.jsを使ったアプリ開発」 => https://qiita.com/nkjm/items/723990c518acfee6e473
4. 「【Node.jsとは？】初心者も理解できる言語の特徴を体系的に解説！」 => https://www.sejuku.net/blog/45745
5. 「未経験からのExpress.js入門｜Express.jsとは」 => https://wiblok.com/js/node/express/express_what/

6. 「Netflix、NASA、PayPalなどの団体でも使用されているNode.js とは」
「https://cpr-solution.jp/2019/12/14/netflix%E3%80%81nasa%E3%80%81paypal%E3%81%AA%E3%81%A9%E3%81%AE%E5%9B%A3%E4%BD%93%E3%81%A7%E3%82%82%E4%BD%BF%E7%94%A8%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bnode-js-%E3%81%A8%E3%81%AF/」

7. 「【2019年完全保存版！】Node.jsを採用して開発している企業・会社一覧」=> https://offers.jp/media/programming/a_1423


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< Node.js技術発表カンペ >

・これから、Node .js & Expressの技術発表を行います！よろしくお願いします。

< 目次 >

・目次は、このようになります。

< 前提知識(共通認識) >

・それでは、前提知識の確認をしましょう！

・JavaScriptは、元々ブラウザ上で動作するプログラミング言語として1995年に開発されました。
　私たちと同い年ぐらいですね。

・ JavaScriptは、現在、フロントで動く言語として地位を確立しており、JavaScriptの独壇場になっています。

・そして、忘れてはいけないのが「クライアント/サーバー」の関係性です。 
　クライアントがリクエストを投げて、サーバーがレスポンスを返すという関係性がありますね。

< JS使いは考える・・・ >

・クライアント側を制したJS使いは考えます！「サーバーサイドもJS使えたらHappyじゃね？？」と！！

< Node.js爆誕！！ >

・そこで、Node.jsが爆誕します！！

<「Node.jsとは？」>

・「Node.jsとは？」何者でしょうか？？

・JavaScriptの「実行環境」それが「Node.js」です。

・つまり、Node.jsは、サーバー側でJavaScriptを使うための実行環境・プラットフォームであり、
　JavaScriptでサーバー処理の制御をすべてプログラミングできるものなのです。

・Node.jsの登場によって、JS使いは歓喜します！！「JavaScriptでフロントもサーバーも書けるぞい！！」


< Node.jsの活躍！ >
・「Node.js」を使うと、普段慣れ親しんだJavaScriptだけでサーバー環境を構築したり大量のデータを捌いたりすることが出来るわけです。
なので、現在では多数のNode.js向けライブラリが提供されており、IoT開発やスマホアプリ開発にも利用されるようになってきました！

・このように、JavaScriptだけで実現できることが近年は特に増えています！


< Node.jsの特徴 >
次にNode.jsが持つ特徴を3つに分けて解説を行います。
 それは、「非同期処理」・「シングルスレッド」・「V8エンジン」の3つです。それぞれ詳しく見ていきましょう！


特徴1つ目「非同期処理による高速な動作」について解説します！

・プログラムには「同期処理」と「非同期処理」の2種類があります。
　一般的なプログラムは同期処理で動いており、上から下へ1行ずつ順番に実行されていくのが普通です。

・例えば、サーバーにあるデータベースから「値」を取得するプログラムを想定してみましょう。

・この場合、サーバーへアクセスして「値」を取得できるまでプログラムはストップしてしまいます。
しかし、「非同期処理」の場合は処理を実行したらすぐに別の処理が実行できるようになります。
つまり、バックグラウンドで処理をしてくれて、次の処理に行けるわけです。

・サーバーから「値」を取得していなくても、すぐに次の処理を実行できるのでレスポンスが高速になるわけです。
そして、「値」が取得できたタイミングで引き続き元の処理を行うことができます。

・JavaScriptベースであるがゆえの強みですね！！


特徴2つ目「シングルスレッドによるメモリ消費の効率化」について解説します！

・Node.jsの重要な概念として「シングルスレッド」「マルチスレッド」というのがあります。

・一般的なサーバーは「マルチスレッド」に対応しており、複数のアクセスが来た際にはそれぞれメモリを割り当てて処理を行います。

・しかし、この方法は「C10K問題」とよく言われるように、1万人規模の大量アクセスが来た場合にメモリがパンクして効率が悪くなります。

・逆に「シングルスレッド」の場合は、1つのメモリでアクセスを1つずつ処理するのでメモリ効率はとてもいいです。

・ただし、この方法だと1つずつしか処理できないので大量のアクセスを制御しにくいのですが、Node.jsは非同期処理ができますよね？

・そのため、シングルスレッドによる少ないメモリ消費で大量のアクセスを高速に処理できるというわけです！


特徴3つ目「V8エンジンによる高速な実行環境」について解説します！

・Node.jsはJavaScriptを高速に実行させるため、Googleが開発した実行エンジン「V8」を利用しています。

・「V8」はChromeブラウザに搭載されているのですが、これをサーバーサイドのNode.jsでも使えるようにしているわけです。

・従来の実行エンジンと違い、JavaScriptを即座にコンピュータが理解できる機械語に変換して処理を行うため非常に高速です。

・また、オープンソースとして開発されているので、「V8」のソースコードが無償で公開されているのも特徴の1つだと言えます。

・このような実行エンジンを利用することで、もともと高速な処理ができるNode.jsをさらに強固なものにしているわけです。


< Node.jsの導入実績 >

・他のサーバーサイド言語にはない特徴を持つNode.jsは、名だたる企業に導入されています。

・みんな大好きNetflixや、あのNASAでも使われています！

<Node.js実演>

・それではNode.jsについて知った上で、どのように使うのか、コードなどを確認していきましょう！！

<  実演終了後>

・『Node.jsなら、サーバー側でもJavaScriptは戦える！！』😁


< フロント開発でも活躍！「モジュール」と「パッケージ」 >


・フロント開発でも活躍する「モジュール」と「パッケージ」について解説していきます！

・フロントエンド開発において特に重要な「モジュールAPI」

「モジュールとは？」
・モジュールはただのファイル
・モジュールは相互に読み込んだり、exportとimportを使用して機能をやり取りしたり、あるモジュールのを別のモジュールから呼び出したりすることができます。

・モジュールには、「スコープ」の概念があります。
・JavaScriptのモジュールは、1ファイル単位で、ファイル内の変数や関数は外部に影響を及ぼしません。 
　つまり、モジュール化されていると、そのファイル内で完結している。
　なので、「名前空間」(命名被る)の問題が解決できます。

・モジュール化することで、、、使い回しや保守性がアップする！

「パッケージとは？」
・パッケージとは、「共有したい機能の単位」です。
・そして、Node.jsで言うパッケージとは、package.jsonで記述されたファイルやディレクトリのことです。
=> 共有したい機能の単位がパッケージ化されていて、1ファイルの場合もあれば、1ディレクトリの場合もあります。


・モジュールによって、名前空間の機能の細分化がされる。 => 機能の組み合わせで色々なものが作れるようになって、パッケージ開発が進みました。
　 つまり、共通する機能は、パッケージ化して、使い回しってことです。

< どうやって共有するの？ >
・Node.jsでいろいろなパッケージが開発されるようになると、そのパッケージのバージョンを管理したり、共有するためのシステムの必要性が生まれる。
=> そこで、パッケージ管理システム「npm」(Node package manager)が誕生します！

・パッケージインストールを手動で行うのは、非効率です。それは依存関係が複雑化してしまうことに起因します！！

・そんな依存関係の問題も、npmを使用することで、パッケージに必要な別のパッケージを自動的にインストールや更新することができます。

・つまり、パッケージを自動で簡単にインストールしたり、管理できるのがパッケージ管理システムということです。

< Node & npm関連ファイル確認しよう！ >
・package.json => パッケージの確認ができます。
・package-lock.json => 細かい依存関係を知ることがでできます。
・node_modules => 依存関係のモジュールたち(パッケージ)が入っている。

・それでは、実際にNode & npm関連ファイル確認しましょう！！


< Node.jsをパワーアップする！「Express」 >

・「Express」とは何か？ 簡単に説明していきます。

・Expressは、Node.js専用のフレームワークの1つで、アプリ開発のための仕組みと機能がまとまっています。

・最小構成のインターフェースの提供なので、「軽量」であり、カスタマイズしやすい点が開発者に人気のようです。


< 終わりに >

・Node.jsに関連するnpmなどは、フロントエンド開発でも使用するので、学んで腑に落ちることが多かったです。

・フロントエンド開発で使用するモジュールやパッケージに関する理解が深まりました。関連技術は調べておくと今後に役立つと思います。

