
< Vueの使い方・考え方 >

1. 「.vueファイル」は、単一ファイルコンポーネント => 1ファイル1コンポーネント

    1つのファイルにテンプレート, javascript, cssなどを書く！


2. new Vueで生成されたVueインスタンスがを作成することで、すべてのVueアプリケーションは動作します！



---------------------------------------------------------------------------------------------------------------------------------------

< Vueプロジェクトの構造 >

1. public/index.html

2. src/main.js => Vueインスタンスを生成して、index.htmlと接続するJSファイル

3. src/App.vue => 最初にレンダリングされるルートのVueコンポーネント

    src/router => ルーティング設定ディレクトリ

    src/store => storeディレクトリ

    src/views => 画面(view)のディレクトリ

    src/components => コンポーネント(パーツ・部品)のディレクトリ

---------------------------------------------------------------------------------------------------------------------------------------

< Vueプロジェクトの環境構築 >

# Vue-CLIのインストール
npm install -g @vue/cli@3.5.0


# インストールしたVueのバージョン確認
vue -V


# vueプロジェクトの作成(ver.CLI使用)
vue create sample-app


---------------------------------------------------------------------------------------------------------------------------------------

< Vueコンポーネント >

1. templateタグ => HTML部分(viewであり、画面担当)

2. scriptタグ => JavaScript部分(ロジックであり、処理担当)

3. styleタグ => CSS部分(デザイン担当)



---------------------------------------------------------------------------------------------------------------------------------------

< Vueライフサイクル >

ライフサイクルフック


< createdメソッド >


data(){
    return {
      todos: [],
    }
  },

  // 画面生成時に、処理発動
created(){

    console.log('画面生成時');
    console.log(this);      // VueComponentが表示
    console.log(this.todos); // このvueコンポーネントのtodos(storeデータ格納前)

    this.todos = this.$store.state.todoList; // thisでVueインスタンスを指定している！

    console.log(this.todos); // このvueコンポーネントのtodos(storeデータ格納後)
},

---------------------------------------------------------------------------------------------------------------------------------------

< dataオプション & dataメソッド >

dataオプションは、Vueインスタンスで使用するデータを定義します！

記法1
data: {}

記法2
data(){
    return {

    }
}

data:function(){ return {} } の省略形


---------------------------------------------------------------------------------------------------------------------------------------

< methodsオプション >

methodsオプションは、メソッドを定義する箇所

オプションに指定している値をプロパティ(key)と呼ぶ！



---------------------------------------------------------------------------------------------------------------------------------------

< Vuexの利用方法 >

state, mutaitions, actions, getters の4つを使いこなす！

1. state => データの状態管理(データ保持)

2. mutaitions => データの更新処理

3. actions => mutaitionsとのやり取り, 外部との通信, コンポーネントとのやり取り

4. getters => stateからデータを加工・処理する



「.vueファイル」でVuexのStore機能を利用する！

---------------------------------------------------------------------------------------------------------------------------------------

< mapActionsの使い方 >

1. mapActions読み込み！
    import { mapActions } from 'vuex';

2. methodsオプション内で、mapActionsメソッドとactionを登録(配列形式)する！
    ...mapActions(['deleteTodo']),


---------------------------------------------------------------------------------------------------------------------------------------

< Vue-Routerの活用方法 >


1. router-linkタグで静的ルーティング

    <router-link to="/">Todo一覧</router-link>

    アンカータグのような役割

2. router-viewタグでview(画面)を表示する！

    <router-view/>

    <!-- パスによってここの画面表示は、切り替わる -->

3. this.$router.pushで動的なページ遷移(ルーティング)

    this.$router.push('/thanks');


4. パラメーターを遷移先に渡す！

this.$router.push() => Routerインスタンスのpushメソッド

this.$route.params => Routeオブジェクトのparamsにアクセス


< Vue-Routerの中身を確認 >

created(){
    console.log(this.$router);
    console.log(this.$route);
},


< console.log(this.$router)の結果 >

VueRouter {app: Vue, apps: Array(1), options: {…}, beforeHooks: Array(0), resolveHooks: Array(0), …}
    afterHooks: []
    app: Vue {_uid: 2, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}
    apps: [Vue]
    beforeHooks: []
    fallback: false
    history: HTML5History {router: VueRouter, base: '', current: {…}, pending: null, ready: true, …}
    matcher: {match: ƒ, addRoute: ƒ, getRoutes: ƒ, addRoutes: ƒ}
    mode: "history"
    options: {mode: 'history', base: '/', routes: Array(3)}
    resolveHooks: []
    currentRoute: (...)
[[Prototype]]: Object


< console.log(this.$route)の結果 >

{name: 'TodoDetail', meta: {…}, path: '/detail/1', hash: '', query: {…}, …}
    fullPath: "/detail/1"
    hash: ""
    matched: [{…}]
    meta: {}
    name: "TodoDetail"
    params: {id: '1'}
    path: "/detail/1"
    query: {}
[[Prototype]]: Object




---------------------------------------------------------------------------------------------------------------------------------------

< v-bindディレクティブ >






---------------------------------------------------------------------------------------------------------------------------------------

< v-onディレクティブ >






---------------------------------------------------------------------------------------------------------------------------------------

< v-modelディレクティブ >






---------------------------------------------------------------------------------------------------------------------------------------

< v-forディレクティブ >

1. v-forディレクティブを使って、繰り返しレンダリング

2. v-bind:key=" " で一意のkeyを設定する！

<li v-for="todo in todos" v-bind:key="todo.id">
    {{todo.id}}
    {{todo.task}}
</li>




---------------------------------------------------------------------------------------------------------------------------------------

< Vue関連ドキュメント >


VueRouterドキュメント => https://router.vuejs.org/ja/guide/
Vuexドキュメント => https://vuex.vuejs.org/ja/
Vuetifyドキュメント => https://vuetifyjs.com/ja/


---------------------------------------------------------------------------------------------------------------------------------------

< Vue × TypeScript >







VueにTypeScriptを導入する3つのやり方を比較してみた
https://qiita.com/fruitriin/items/2e7d049257b10ddd56cb



---------------------------------------------------------------------------------------------------------------------------------------
