// 0.関数は値を受け取って何か処理をして値を返すやつ

// JavaScriptにおいて関数は第1級オブジェクト（ファーストクラスオブジェクト）です。
// 第1級オブジェクトというのは数値や文字列のような、変数に割り当てられたり、なんらかの計算処理ができたりといった、プログラミングの基本機能が使える対象のことを指します。
// JavaScriptでは変数に関数を突っ込めるので、関数は第1級オブジェクトです。

// 1.関数は、データ加工の職人である！

// 2.関数は値(value)である！
// 関数は値として使える！ => だから、関数式がある！ => 無名関数・匿名関数は、値(value)としての関数！
// オブジェクトの値(value)としても使える！
// returnの戻り値としても使える！ => returnする値として、関数を返せる！
// コールバック関数がある！ => 関数の引数(変数・値)として関数を使用！

// 3.関数は呼び出さなきゃ動かない！ => 関数を呼び出すときは、()をつける！ => つけない場合は値・データとしての関数そのものと見なされる！(処理は動かない！)

// 呼び出すときには、引数を渡そう！！

// 呼び出すときに加工の素材を渡すことができる！
// カッコ無しの場合、関数は実行されません。カッコには「関数を実行する」の意味があるので、無いと何も起こりません。
// ちなみに関数以外（文字列とか）にカッコをつけて関数呼び出ししようとすると「not a function（関数じゃないよ）」と怒られます。

// 4.呼び出し元に値を返すためには、returnを使用する！！

const arrow = () => {
    return 'ロボ玉ジャスティス！！'
}
// console.log(arrow) NGパターン
console.log(arrow())

// ex.functionで定義すると後ろのほうに書いても、前で使える！ => 関数宣言の特徴

// <超重要> ブロックは、1つの世界を表している！ => ブロックスコープがそのわかりやすい例！
// ブロックとは、JavaScriptで0個以上の文をグループ化するために利用される、{}で囲まれた部分を意味します。

// 5.高階関数 => 関数を受け取る関数を高階関数と呼ぶ！
// 関数は「値」です。つまり、こういうことができます => 「関数に関数を渡せる！！」

// 関数を2回実行する関数！！
function doTwice(func) {
    func(); // 1回目！
    func(); // 2回目！
  }
  
  // あいさつするだけの関数
  function hello() {
    console.log('Hello!');
  }
  
  // あいさつを2回実行する
  doTwice(hello);

// 関数に値を渡しつつ2回実行する関数！！
function doTwiceWithValue(func) {
    func('Hello!'); // 1回目！
    func('I am here!!!'); // 2回目！
  }
  
// 受け取ったmessageを表示するだけの関数を渡す
doTwiceWithValue(function(message) { // コールバック関数
console.log(message);
});

// 6.コールバック関数 => 関数の中にある関数
// 自分で直接実行するのではなく、相手に実行してもらうのがコールバック関数です。




// 5.クロージャによる関数のオブジェクト化！カプセル化！
// クロージャとは関数とその関数が定義された状態をセットにした特殊なオブジェクトのことです。

// ざっくり言うと、変数の中に変数が入っている状態を指します。

// 変数を使ってメソッドを変数として代入しているところがポイントです。

// クロージャとして、カプセル化して外部に公開しないメソッドにすることができます。


let createTimer = ()=> {
    let time = 10;

    //console.log(time)

    return () => {
        time -= 1;
        console.log(time);
    };
};

let timer = createTimer()

timer()
timer()
timer()

console.log(timer())
console.log(timer())
console.log(timer())


// 6.「即時関数」 => 関数定義そのものを()で囲って、即実行するもの！

var sum = ( (a,b) => {
    var result = a + b;
    return result;
  } ) (1,2); // 引数をセットしておく！
  console.log(sum);







