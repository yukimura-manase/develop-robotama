// 「map」は配列の各要素に対して処理を実行できる！

// 「forEach」と違い、結果を新しい配列として返してくれる！

// コールバック関数には3つの引数を取得できる！

// 第2引数に任意のオブジェクトを指定できる！

// filterメソッド、reduceメソッドの使い方

// Map型オブジェクトで連想配列を扱う！


// 「map」のコールバック関数
// ここからは、「コールバック関数」について、もう少し詳しく見ていきましょう！

// これまでコールバック関数の引数は1つだけでしたが、実は3つの引数を取得することができます！

// 配列データ.map( ( value, index, array )=> {
 
// });
 
// これらの引数は、次のような意味があります。

// 「value」は、配列の値
// 「index」は、配列のインデックス番号
// 「array」は、現在処理している配列

// 例えば、次のサンプルでは引数の「index」を使って、偶数の「Index番号」の時だけ値を2倍にしています。

var items = [1,2,3,4,5,6,7,8,9];
 
var result = items.map( function( value, index, array ) {
 
    //「index番号」が偶数の時だけ2倍にする
    if( index % 2 !== 0 ) {
        return value * 2;
    }
    else {
        return value;
    }
});
 
console.log( result );
 
// 出力結果は…

// [1, 4, 3, 8, 5, 12, 7, 16, 9]
// となり、偶数番目の値だけ2倍になっているのが分かりますね。このサンプル中の「IF文」の条件式を「index % 2 === 0」に変更すれば、奇数番目の値だけを2倍にすることも出来るわけです。


 //また、「map」は元の配列データに一切変更を加えない特徴がありますが、3つ目の引数「array」を利用すれば、元のデータを変更することも可能です！

var items = [1,2,3,4,5,6,7,8,9];
 
items.map( function( value, index, array ) {
 
    //「array」と「index」を利用して、元の配列データを変更する
    array[index] = value * 2;
 
});
 
//元の配列データを出力する
console.log( items );
 
// 出力結果は…

// [2, 4, 6, 8, 10, 12, 14, 16, 18]
// となります。

// このサンプルでは、引数の「index」「array」を利用して元の配列データにアクセスしているのが分かります。このように記述することで、現在処理している配列データを変更することが可能で、出力結果には値が2倍になった結果が表示されていますね。

// 第2引数のオブジェクトについて
// これまで、「map」の第1引数に「コールバック関数」を指定していましたが、実は第2引数に任意の「オブジェクト」を指定することが出来ます！

var array = [ 配列データ ];
 
//第2引数にオブジェクトを指定
array.map( コールバック関数, オブジェクト );
 
// これにより、指定の配列とオブジェクトを組み合わせて、さらに便利なプログラミングを実現することが出来るわけです。

// 例えば、次のサンプルでは食べ物を簡単なオブジェクトにした「foodList」を、「map」の第2引数に指定した例です。

var foodList = {
  'オムライス': 450,
  '焼きそば': 500,
  'お好み焼き': 600,
  '焼き飯': 400
};
 
配列.map( function( value ) {
 
    //「this」がオブジェクトを参照する
 
}, foodList );  //第2引数にオブジェクトを指定
 
// このように、第2引数へ「foodList」と記述することで、コールバック関数内の「this」が「foodList」を参照できるようになるわけです。

// 次のサンプルでは、オブジェクトから任意のキーワードを指定して「価格」を返す例です。

var foodList = {
  'オムライス': 450,
  '焼きそば': 500,
  'お好み焼き': 600,
  '焼き飯': 400
};
 
//任意のキーワードを指定する
var order = ['焼き飯', 'お好み焼き'];
 
var result = order.map( function( value, index, array ) {
 
//配列のキーワードを使ってオブジェクト内の値を取得する
    return this[value];
 
}, foodList );
 
console.log( result );
 
// 出力結果は…

// [400, 600]
// となります。

// このサンプルでは、配列「order」でキーワードを設定し、そこからオブジェクトに登録されているキーワードと一致した「価格」を取得して配列として返しているのが分かります。
// （出力結果は、それぞれ「焼き飯」「お好み焼き」の価格になっています）

// このように、第2引数へオブジェクトを指定することで、「map」の活用範囲が大きく広がるので、ぜひ慣れておくようにしておきましょう！



