// 1.returnは、関数内で使用される！

// 2.returnは、呼び出し元に値を返す！ => 配列・オブジェクト・関数などを値として返すことができる！
//  returnは関数内で処理したさまざまな値や計算処理(関数)などを戻り値として返せる！

//「return」を使うと、関数内で処理をした結果を「戻り値」として返すことができます。
//「return」を使わずに処理を行ったらそのまま終了となります。

// 3.returnを使うことが当たり前すぎて、省略されがち！！ => 明示的にreturnを使ったりする必要もある！！
// 

// 4.returnが実行されるとそれ以降の処理は実行されずに終了する！
// 

// 5.returnを使用することで、処理結果を返すことで、更なる処理の流れを作ることができる！！
// しかし「return」を使うことで処理を行った結果の値を返せるので、その値を使ってさらに別の処理を続けることが出来るわけです。
// 例えば、IF文の条件式に再利用したり、別に用意された関数の引数へ当てはめるような活用方法も考えられます。


// 「return false」でブラウザ側が標準で用意しているイベント処理を中断できる




