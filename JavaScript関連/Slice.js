// slice()は、文字列や配列などからデータの一部分だけ取り出せるメソッドになります。

// slice()は「文字列型（String）」「配列型（Array）」の両方にそれぞれ用意されています。

// var array = 配列データ
// <構文> array.slice( 開始位置, 終了位置(省略可能) );

// 配列型は、引数にindex番号を持ってくる！ 文字型は、文字の位置を数値で指定する。

// 配列型の場合は要素のインデックス番号の位置で「開始位置・終了位置」を決めるという点を忘れないでください。


var array = ['メロン', 'リンゴ', 'イチゴ', 'バナナ'];
 
//開始位置を指定
var result1 = array.slice( 1 );
 
//開始位置と終了位置を指定
var result2 = array.slice( 1, 3 );
 
console.log( result1 ); // ["リンゴ", "イチゴ", "バナナ"] => 元配列から指定要素を持ったnew配列を作成する！
console.log( result2 ); // ["リンゴ", "イチゴ"]
console.log(array) // 元配列の値は変更されない！

// <注意点>「slice( 1, 3 )」と記述したら、切り抜く値は1つ目と2つ目だけなので注意しましょう！ 

// slice => 切り身,スライス,切る
// <考え方> 開始indexから切り抜き始めて、終了indexの手前までは切り抜く！ => この考え方がベースとなる！
// 1.戻り値は、切り抜いた値からなる配列
// 2.元の配列は変更されない
// <使い所> 配列の中から特定の値だけの配列を作りたい場合



// 値渡しサンプル
// slice関数が使えます。
// コピー元の配列から引数で与えた範囲を値渡しでコピーできます。

// 引数なしだと全範囲対象となるので、ここであ引数を与えずに丸コピします。

const arr1 = [1, 2, 3, 4, 5]

// 値渡し
const arr2 = arr1.slice()

// arr2を更新する
arr2[0] = 10 

// arr1が更新されていないことの確認
console.log(arr1)

// obj2が更新されていることの確認
console.log(arr2)

