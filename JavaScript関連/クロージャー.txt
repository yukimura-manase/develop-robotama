
< クロージャーとは？ >


【 通常の関数 】

    function timeDown() {
        var time = 10;
    
        time -= 1;
        console.log(time);
    }
    
    timeDown(); // 「9」
    timeDown(); // 「9」のまま
    timeDown(); // 「9」のまま


    この関数では、timeDown()がなんど呼ばれても、タイマーの値が入った変数(time)は9のままです。

    呼び出される都度、変数timeは10で初期化されたあとに、-1されるため、得られる結果は変わらず9のままになります。



【 クロージャーの場合 】

    // 無名関数を変数に格納する！
    let createTimer = function () {
        let time = 10;

        return function timeDown() {
            time -= 1;
            console.log(time);
        };
    };

    //グローバル変数にセットされたことで、クロージャになる
    let closerTimer = createTimer();

    closerTimer(); // 「9」
    closerTimer(); // 「8」
    closerTimer(); // 「7」

    クロージャの例の場合、実行結果として9,8,7とtimer()が呼ばれるたびに結果が変わっているのがわかりますね。

    これは、関数（createTimer()）の中で定義された変数（time）と関数（timeDown()）の結果が、セットで保存されているためです。

    この、「データ(値)がセットで保存される」という現象そのものが「クロージャー」です。


< クロージャのメリットとは？ >

    クロージャのメリットは、オブジェクトの変数やメソッドを他のプログラムから簡単に変更されないように制御できることです。

    ソース量が多かったりチームで開発をする場合は、自分のプログラムで使用しているオブジェクトの変数の値などが他のプログラムで容易に書き換えできるようになっていると、予期せぬエラーやバグが発生する可能性があります。

    そのため、カプセル化と呼ばれる、オブジェクト内部で使用している変数やメソッドを容易に変更できない仕組みが存在しています。

    クロージャはその仕組みの一役を担っているのです。

< クロージャの使い方・基本構文 >

var メソッド名 = function(引数) {
 
   // 処理
 
}
varを使ってメソッドを変数として代入しているところがポイントです。

こうすることにより、クロージャとして、カプセル化して外部に公開しないメソッドにすることができます。

ちなみに、プロパティの場合は下記のように書くことでカプセル化することができます。

var プロパティ名 = 値




< クロージャのスコープ >

関数のスコープは、関数の定義された内側のスコープを関数のスコープとしますが、クロージャは少し違います。

クロージャでは、クロージャが定義された外側のスコープをクロージャのスコープとして使用することができるのです。

クロージャが定義された外側の変数にアクセスできることを確認してみましょう。



< クロージャーと即時関数 >



【JavaScript入門】クロージャって一体何？使い方まで徹底解説
https://www.sejuku.net/blog/25026








