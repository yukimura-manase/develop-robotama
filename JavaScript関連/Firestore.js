// 0.データ構造の表現として、ドキュメントとコレクションがある！！
// これを幾重にも繰り返すことで、階層構造を作ることができる！
// コレクション => ドキュメント => コレクション => ドキュメント => コレクション => ドキュメント

// 1.ドキュメント => オブジェクトのようなイメージでOK！
// 「key:value」のペアをまとめて1件のドキュメントとして保存している！

// 2.コレクション => 配列のようなイメージでOK！
// ドキュメントを格納するための配列のようなもの => すべてのドキュメントは、コレクションの中に保存される！

// データアクセスの基礎となるリファレンスとスナップショット

// 3.リファレンス

// 4.スナップショット(snapshot)
// Firestore上のデータを参照する(値を取り出す)場合は、スナップショットを通じて行います！



// docメソッド => 単一ドキュメントを取得

// - CollectionReference.doc(docId)
// 　- DocumentReference.get()
// 　- ( 戻り値: DocumentSnapshot )


// 複数ドキュメントを取得
// 　- CollectionReference.get()
// 　- ( 戻り値: QuerySnapshot )

// 条件指定
// 　- 複合インデックスが必要なケース


// <FireStoreのメソッド一覧>
// メソッド	動作	備考
// add	追加	ドキュメント名はランダムな文字列になる
// set	追加	ドキュメント名を指定できる
// set	更新	ドキュメントを更新(上書き)、フィールド追加
// update	更新	ドキュメントのフィールドを更新
// get	取得	ドキュメントを取得
// delete	削除	ドキュメントを削除
// onSnapshot	取得	変更の監視・データ取得



// <ドキュメントの参照方法>
// 
// firebase.firestore().collection('something')

// somethingで特定のコレクション？データ群(どういう名前かわからないので、教えてください)にアクセスできます。

// またcollectionで指定したものが存在しない場合は自動で作成してくれます。

// Firestoreのドキュメントなどでは下のように参照できるようにしてありました。

// Vue.js
//  data() {
//     return {
//       memoRef: firebase.firestore().collection('memos')
//     }
//   }
// データの追加 => add, doc().set
// データの追加はaddメソッド、もしくはsetメソッドでできます。

// データの追加 => add, doc().set
// データの追加はaddメソッド、もしくはsetメソッドでできます。

// <超重要！！> addメソッド
// この２つの違いとしては、addメソッドでは作成時に一意なIDを自動作成してくれます。idにアクセスしたいときは.thenを使うといいかと、、、。


//コレクションのパスは奇数でなければならない！！



